<?xml version="1.1" encoding="UTF-8"?>
<testsuite name="JavaSampleTests" tests="14" failures="10" errors="0" timestamp="2014-01-04T22:11:55" hostname="redapple.home" time="0.101">
  <properties/>
  <testcase name="make and remove sample file" classname="JavaSampleTests" time="0.051"/>
  <testcase name="simple test to invoke JavaSample" classname="JavaSampleTests" time="0.01"/>
  <testcase name="Test 1 should getName for Fred" classname="JavaSampleTests" time="0.0"/>
  <testcase name="Test 2 should getName for Andy" classname="JavaSampleTests" time="0.0010">
    <failure message="Condition not satisfied:&#10;&#10;sample.getName() == data&#10;&#10;getName not as expected&#10;" type="org.spockframework.runtime.ConditionNotSatisfiedError">Condition not satisfied:

sample.getName() == data

getName not as expected

	at JavaSampleTests.Test #test should getName for #data(JavaSampleTests.groovy:50)
</failure>
  </testcase>
  <testcase name="Test 3 should getName for Leanne" classname="JavaSampleTests" time="0.0">
    <failure message="Condition not satisfied:&#10;&#10;sample.getName() == data&#10;&#10;getName not as expected&#10;" type="org.spockframework.runtime.ConditionNotSatisfiedError">Condition not satisfied:

sample.getName() == data

getName not as expected

	at JavaSampleTests.Test #test should getName for #data(JavaSampleTests.groovy:50)
</failure>
  </testcase>
  <testcase name="Test 4 should keep Fred" classname="JavaSampleTests" time="0.0">
    <failure message="Condition not satisfied:&#10;&#10;sample.setName(data) == data&#10;&#10;setName assert failed&#10;" type="org.spockframework.runtime.ConditionNotSatisfiedError">Condition not satisfied:

sample.setName(data) == data

setName assert failed

	at JavaSampleTests.Test #test should keep #data(JavaSampleTests.groovy:69)
</failure>
  </testcase>
  <testcase name="Test 5 should keep Andy" classname="JavaSampleTests" time="0.0">
    <failure message="Condition not satisfied:&#10;&#10;sample.setName(data) == data&#10;&#10;setName assert failed&#10;" type="org.spockframework.runtime.ConditionNotSatisfiedError">Condition not satisfied:

sample.setName(data) == data

setName assert failed

	at JavaSampleTests.Test #test should keep #data(JavaSampleTests.groovy:69)
</failure>
  </testcase>
  <testcase name="Test 6 should keep Leanne" classname="JavaSampleTests" time="0.0">
    <failure message="Condition not satisfied:&#10;&#10;sample.setName(data) == data&#10;&#10;setName assert failed&#10;" type="org.spockframework.runtime.ConditionNotSatisfiedError">Condition not satisfied:

sample.setName(data) == data

setName assert failed

	at JavaSampleTests.Test #test should keep #data(JavaSampleTests.groovy:69)
</failure>
  </testcase>
  <testcase name="Test 7 should use groovy.property logic to get name as Fred" classname="JavaSampleTests" time="0.0">
    <failure message="Condition not satisfied:&#10;&#10;sample.name == data&#10;&#10;name was not what we expected&#10;" type="org.spockframework.runtime.ConditionNotSatisfiedError">Condition not satisfied:

sample.name == data

name was not what we expected

	at JavaSampleTests.Test #test should use groovy.property logic to get name as #data(JavaSampleTests.groovy:87)
</failure>
  </testcase>
  <testcase name="Test 8 should use groovy.property logic to get name as Andy" classname="JavaSampleTests" time="0.0"/>
  <testcase name="Test 9 should use groovy.property logic to get name as Leanne" classname="JavaSampleTests" time="0.0">
    <failure message="Condition not satisfied:&#10;&#10;sample.name == data&#10;&#10;name was not what we expected&#10;" type="org.spockframework.runtime.ConditionNotSatisfiedError">Condition not satisfied:

sample.name == data

name was not what we expected

	at JavaSampleTests.Test #test should use groovy.property logic to get name as #data(JavaSampleTests.groovy:87)
</failure>
  </testcase>
  <testcase name="Test 10 should use groovy.property logic to get name as Fred" classname="JavaSampleTests" time="0.0010">
    <failure message="Condition not satisfied:&#10;&#10;sample.getName() == sample.setName(&quot;Leanne&quot;)&#10;&#10;set/get name was not what we expected&#10;" type="org.spockframework.runtime.ConditionNotSatisfiedError">Condition not satisfied:

sample.getName() == sample.setName(&quot;Leanne&quot;)

set/get name was not what we expected

	at JavaSampleTests.Test #test should use groovy.property logic to get name as #data(JavaSampleTests.groovy:105)
</failure>
  </testcase>
  <testcase name="Test 11 should use groovy.property logic to get name as Andy" classname="JavaSampleTests" time="0.0">
    <failure message="Condition not satisfied:&#10;&#10;sample.getName() == sample.setName(&quot;Leanne&quot;)&#10;&#10;set/get name was not what we expected&#10;" type="org.spockframework.runtime.ConditionNotSatisfiedError">Condition not satisfied:

sample.getName() == sample.setName(&quot;Leanne&quot;)

set/get name was not what we expected

	at JavaSampleTests.Test #test should use groovy.property logic to get name as #data(JavaSampleTests.groovy:105)
</failure>
  </testcase>
  <testcase name="Test 12 should use groovy.property logic to get name as Leanne" classname="JavaSampleTests" time="0.0010">
    <failure message="Condition not satisfied:&#10;&#10;sample.getName() == sample.setName(&quot;Leanne&quot;)&#10;&#10;set/get name was not what we expected&#10;" type="org.spockframework.runtime.ConditionNotSatisfiedError">Condition not satisfied:

sample.getName() == sample.setName(&quot;Leanne&quot;)

set/get name was not what we expected

	at JavaSampleTests.Test #test should use groovy.property logic to get name as #data(JavaSampleTests.groovy:105)
</failure>
  </testcase>
  <system-out><![CDATA[ok, done
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
